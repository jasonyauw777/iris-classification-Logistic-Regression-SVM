# -*- coding: utf-8 -*-
"""Machine Learning Project LEC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DmNt7oplAx_6i3TqlQrGIKVvty_6ql0k

# **IRIS CLASSIFICATION WITH LOGISTIC REGRESSION AND SVM**
"""

# Load CSV file from my google drive 

from google.colab import drive
drive.mount('/content/drive')

# import pandas library
# read csv file

import pandas as pd

path = "/content/drive/MyDrive/Colab Notebooks/ML LEC PROJECT/Iris.csv"

iris_df = pd.read_csv(path)

"""# **1. Preprocessing**"""

iris_df

"""Deleting repetitive column."""

iris_df = iris_df.drop(["Id"], axis=1)

"""Deleting NULL values"""

iris_df = iris_df.dropna()

iris_df.info()

iris_df.describe()

# import all necesarry librarries for plotting histogram and pdf
import matplotlib.pyplot as plt
import seaborn as sb
from pylab import *
from scipy.stats import norm

"""##Plotting Histogram to represent distribution of features."""

sb.histplot(data=iris_df, x="SepalLengthCm", hue="Species")

sb.histplot(data=iris_df, x="SepalWidthCm", hue="Species")

sb.histplot(data=iris_df, x="PetalLengthCm", hue="Species")

sb.histplot(data=iris_df, x="PetalWidthCm", hue="Species")

"""# **2. Feature Engineering**

# *Standardization*
"""

new_iris_df = iris_df.copy()

new_iris_df

new_iris_df['SepalLengthCm'] = (iris_df['SepalLengthCm'] - iris_df['SepalLengthCm'].mean()) / iris_df['SepalLengthCm'].std()
new_iris_df['SepalWidthCm'] = (iris_df['SepalWidthCm'] - iris_df['SepalWidthCm'].mean()) / iris_df['SepalWidthCm'].std()
new_iris_df['PetalLengthCm'] = (iris_df['PetalLengthCm'] - iris_df['PetalLengthCm'].mean()) / iris_df['PetalLengthCm'].std()
new_iris_df['PetalWidthCm'] = (iris_df['PetalWidthCm'] - iris_df['PetalWidthCm'].mean()) / iris_df['PetalWidthCm'].std()

new_iris_df

"""# **3. Training**"""

import numpy as np
from sklearn.metrics import accuracy_score
from sklearn import preprocessing
from sklearn.model_selection import train_test_split

new_iris_df

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, f1_score

train, test = train_test_split(new_iris_df, test_size = 0.3)

train

test

LGR = LogisticRegression(C = 1.0, solver = 'liblinear').fit(
    train[["SepalLengthCm","SepalWidthCm","PetalLengthCm","PetalWidthCm"]], train["Species"])

from sklearn import svm

SVM = svm.SVC().fit(train[["SepalLengthCm","SepalWidthCm","PetalLengthCm","PetalWidthCm"]], train["Species"])

"""## **4. Evaluation**

**Logistic Regression**
"""

iris_classification_test = LGR.predict(test[["SepalLengthCm","SepalWidthCm","PetalLengthCm","PetalWidthCm"]])

iris_classification_train = LGR.predict(train[["SepalLengthCm","SepalWidthCm","PetalLengthCm","PetalWidthCm"]])

accuracy_testdata = accuracy_score(test["Species"], iris_classification_test)

accuracy_traindata = accuracy_score(train["Species"], iris_classification_train)

print(" Accuracy Test Data : %.2f" % accuracy_testdata)

print(" Accuracy Train Data : %.2f" % accuracy_traindata)

LGR.intercept_

LGR.coef_

LGR.predict_proba(test[["SepalLengthCm","SepalWidthCm","PetalLengthCm","PetalWidthCm"]])

LGR.predict_proba(train[["SepalLengthCm","SepalWidthCm","PetalLengthCm","PetalWidthCm"]])

"""# *Confusion Matrix*"""

cf_matrix = confusion_matrix(train["Species"], iris_classification_train)
sb.heatmap(cf_matrix, cmap="Blues", annot=True)
plt.show()

cf_matrix = confusion_matrix(test["Species"], iris_classification_test)
sb.heatmap(cf_matrix, cmap="Blues", annot=True)
plt.show()

"""# *Classification Report*"""

print(classification_report(train["Species"], iris_classification_train))

print(classification_report(test["Species"], iris_classification_test))

"""# SVM"""

svm_classification_test = SVM.predict(test[["SepalLengthCm","SepalWidthCm","PetalLengthCm","PetalWidthCm"]])

svm_classification_train = SVM.predict(train[["SepalLengthCm","SepalWidthCm","PetalLengthCm","PetalWidthCm"]])

accuracy_testdata = accuracy_score(test["Species"], svm_classification_test)

accuracy_traindata = accuracy_score(train["Species"], svm_classification_train)

print(" Accuracy Test Data : %.2f" % accuracy_testdata)

print(" Accuracy Train Data : %.2f" % accuracy_traindata)

cf_matrix_svm = confusion_matrix(train["Species"], svm_classification_train)
sb.heatmap(cf_matrix_svm, cmap="Blues", annot=True)
plt.show()

cf_matrix_svm2 = confusion_matrix(test["Species"], svm_classification_test)
sb.heatmap(cf_matrix_svm2, cmap="Blues", annot=True)
plt.show()

print(classification_report(train["Species"], svm_classification_train))

print(classification_report(test["Species"], svm_classification_test))